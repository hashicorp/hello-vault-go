version: "3.9"
services:

  app:
    build: .
    environment:
      MY_ADDRESS:                   :8080
      VAULT_ADDRESS:                http://vault-server:8200
      VAULT_APPROLE_ROLE_ID:        demo-web-app
      VAULT_APPROLE_SECRET_ID_FILE: /tmp/secret
      VAULT_DATABASE_CREDS_PATH:    database/creds/dev-readonly
      VAULT_API_KEY_PATH:           kv-v2/data/api-key
      DATABASE_HOSTNAME:            db
      DATABASE_PORT:                5432
      DATABASE_NAME:                postgres
      DATABASE_TIMEOUT:             10s
      SECURE_SERVICE_ADDRESS:       http://secure-service/api
    ports:
      - "8080:8080"
    volumes:
      - type:   volume
        source: trusted-orchestrator-volume
        target: /tmp
    # wait for our vault setup script to drop off a role id before we start the web app
    entrypoint: ./wait-for-vault.sh ./hello-vault
    depends_on:
      db:
        condition: service_started
      trusted-orchestrator:
        condition: service_started
      secure-service:
        condition: service_started

  db:
    image: postgres:14.0
    restart: always
    environment:
      POSTGRES_PASSWORD: rootpassword
    volumes:
      - type:   volume
        source: db-data
        target: /var/lib/postgresql/data
      - type:   bind
        source: ./setup/db
        target: /docker-entrypoint-initdb.d/"
    ports:
      - "5432:5432"

  vault-server:
    build: ./setup/vault-server/
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      ORCHESTRATOR_TOKEN:      insecure_token
      APPROLE_ROLE_ID:         demo-web-app
      DB_HOST:                 db
    ports:
      - "8200:8200"
    depends_on:
      db:
        condition: service_started

  trusted-orchestrator:
    build: ./setup/trusted-orchestrator
    environment:
      VAULT_ADDRESS:      http://vault-server:8200
      ORCHESTRATOR_TOKEN: insecure_token
    volumes:
      - type: volume
        source: trusted-orchestrator-volume
        target: /tmp
    depends_on:
      vault-server:
        condition: service_started

  # secure-service is a simulated 3rd party service that requires a specific header to get a 200 response
  secure-service:
    image: nginx:latest
    volumes:
      - type:   bind
        source: ./setup/secure-service/default.conf.template
        target: /etc/nginx/templates/default.conf.template
    ports:
      - "1717:80"
    environment:
      EXPECTED_API_KEY: my-secret-key # sets the expected value for incoming requests' header X-API-KEY

volumes:
  db-data:
  trusted-orchestrator-volume:
